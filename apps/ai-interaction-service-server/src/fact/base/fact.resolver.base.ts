/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Fact } from "./Fact";
import { FactCountArgs } from "./FactCountArgs";
import { FactFindManyArgs } from "./FactFindManyArgs";
import { FactFindUniqueArgs } from "./FactFindUniqueArgs";
import { CreateFactArgs } from "./CreateFactArgs";
import { UpdateFactArgs } from "./UpdateFactArgs";
import { DeleteFactArgs } from "./DeleteFactArgs";
import { FactService } from "../fact.service";
@graphql.Resolver(() => Fact)
export class FactResolverBase {
  constructor(protected readonly service: FactService) {}

  async _factsMeta(
    @graphql.Args() args: FactCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Fact])
  async facts(@graphql.Args() args: FactFindManyArgs): Promise<Fact[]> {
    return this.service.facts(args);
  }

  @graphql.Query(() => Fact, { nullable: true })
  async fact(@graphql.Args() args: FactFindUniqueArgs): Promise<Fact | null> {
    const result = await this.service.fact(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Fact)
  async createFact(@graphql.Args() args: CreateFactArgs): Promise<Fact> {
    return await this.service.createFact({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Fact)
  async updateFact(@graphql.Args() args: UpdateFactArgs): Promise<Fact | null> {
    try {
      return await this.service.updateFact({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Fact)
  async deleteFact(@graphql.Args() args: DeleteFactArgs): Promise<Fact | null> {
    try {
      return await this.service.deleteFact(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
