/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Fact as PrismaFact } from "@prisma/client";

export class FactServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.FactCountArgs, "select">): Promise<number> {
    return this.prisma.fact.count(args);
  }

  async facts<T extends Prisma.FactFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FactFindManyArgs>
  ): Promise<PrismaFact[]> {
    return this.prisma.fact.findMany<Prisma.FactFindManyArgs>(args);
  }
  async fact<T extends Prisma.FactFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FactFindUniqueArgs>
  ): Promise<PrismaFact | null> {
    return this.prisma.fact.findUnique(args);
  }
  async createFact<T extends Prisma.FactCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FactCreateArgs>
  ): Promise<PrismaFact> {
    return this.prisma.fact.create<T>(args);
  }
  async updateFact<T extends Prisma.FactUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FactUpdateArgs>
  ): Promise<PrismaFact> {
    return this.prisma.fact.update<T>(args);
  }
  async deleteFact<T extends Prisma.FactDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FactDeleteArgs>
  ): Promise<PrismaFact> {
    return this.prisma.fact.delete(args);
  }
}
